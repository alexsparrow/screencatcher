{"version":3,"sources":["export/exportPng.ts","components/Toolbar.tsx","components/Cropper.tsx","components/Video.tsx","App.tsx","utils/useContainerDimensions.tsx","export/exportGif.ts","serviceWorker.ts","index.tsx"],"names":["exportPng","video","x","y","width","height","targetWidth","targetHeight","callback","canvas","document","createElement","context","getContext","startTime","Date","now","lastTime","frames","dels","play","onloadeddata","capture","timeSinceLastFrame","drawImage","imageData","getImageData","push","data","paused","requestAnimationFrame","UPNG","encode","Toolbar","recording","converting","startCapture","stopCapture","setGifWidth","gifWidth","setCropping","durationSecs","onExportGif","onExportPng","gif","png","progress","base64","btoa","Uint8Array","reduce","byte","String","fromCharCode","disabled","onClick","icon","align","Alignment","RIGHT","minimal","content","text","map","download","href","target","style","value","numeral","format","Reactable","reactable","props","ref","getRef","position","left","top","touchAction","borderWidth","borderColor","borderStyle","pointerEvents","onCrop","onCropCancel","Cropper","onCancel","React","useState","coordinate","setCoordinate","resizable","edges","right","bottom","modifiers","interact","restrictRect","restriction","draggable","onDragMove","event","prev","dx","dy","onResizeMove","e","rect","deltaRect","Video","chunksUrl","autoPlay","controls","maxHeight","maxWidth","src","undefined","captureDisplay","displayMediaOptions","a","captureStream","navigator","mediaDevices","getDisplayMedia","console","error","cursor","audio","App","mediaRecorder","setMediaRecorder","chunks","setChunks","setChunksUrl","setRecording","setConverting","setStartTime","stopTime","setStopTime","currentTime","setCurrentTime","screenWidth","setScreenWidth","screenHeight","setScreenHeight","setGif","setProgress","setPng","cropping","cropDimensions","setCropDimensions","_mediaRecorder","MediaRecorder","ondataavailable","existing","onstop","URL","createObjectURL","getVideoTracks","getSettings","start","stop","videoRef","useRef","myRef","getDimensions","current","offsetWidth","offsetHeight","dimensions","setDimensions","useEffect","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","browserAspectRatio","videoAspectRatio","videoLeft","videoTop","videoWidth","videoHeight","scaledHeight","scaledWidth","log","setTimeout","className","onImageComplete","onImageProgress","gifHeight","durationMillis","numFrames","Math","trunc","gifshot","createGIF","interval","frameDuration","progressCallback","obj","image","exportGif","img","vid","scaleFactorX","scaleFactorY","round","padding","backgroundColor","title","description","action","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9ff54626.chunk.js","sourcesContent":["import UPNG from \"upng-js\";\n\nexport const exportPng = (\n  video: HTMLVideoElement,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  targetWidth: number,\n  targetHeight: number,\n  callback: any\n) => {\n  const interval = 100;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = targetWidth;\n  canvas.height = targetHeight;\n  const context = canvas.getContext(\"2d\");\n\n  let startTime = Date.now();\n  let lastTime = startTime;\n\n  let frames: any[] = [];\n  let dels: number[] = [];\n\n  const capture = () => {\n    const timeSinceLastFrame = Date.now() - lastTime;\n    if (timeSinceLastFrame > interval) {\n      context?.drawImage(video, x, y, width, height, 0, 0, targetWidth, targetHeight);\n      const imageData = context?.getImageData(0, 0, targetWidth, targetHeight);\n      lastTime = Date.now();\n\n      frames.push(imageData?.data);\n      dels.push(timeSinceLastFrame);\n    }\n\n    if (!video.paused && Date.now() - startTime < 30000) {\n      requestAnimationFrame(capture);\n    } else {\n      callback(UPNG.encode(frames, targetWidth, targetHeight, 255, dels));\n    }\n  };\n\n  video.play();\n  video.onloadeddata = () => {\n    startTime = Date.now();\n    capture();\n  };\n};","import React from \"react\";\nimport {\n  MenuItem,\n  Menu,\n  NavbarDivider,\n  Popover,\n  NavbarGroup,\n  Navbar,\n  Button,\n  ProgressBar,\n  NavbarHeading,\n  Alignment,\n  MenuDivider,\n} from \"@blueprintjs/core\";\nimport numeral from \"numeral\";\n\nexport const Toolbar = ({\n  recording,\n  converting,\n  startCapture,\n  stopCapture,\n  setGifWidth,\n  gifWidth,\n  setCropping,\n  durationSecs,\n  onExportGif,\n  onExportPng,\n  gif,\n  png,\n  progress,\n}: {\n  recording: boolean;\n  converting: boolean;\n  startCapture: any;\n  stopCapture: any;\n  setGifWidth: any;\n  gifWidth: number;\n  setCropping: any;\n  durationSecs: number;\n  onExportGif: any;\n  onExportPng: any;\n  gif: any;\n  png: any;\n  progress: number;\n}) => {\n  const base64 = btoa(\n    new Uint8Array(png).reduce(\n      (data, byte) => data + String.fromCharCode(byte),\n      \"\"\n    )\n  );\n\n  const imageWidths = [256, 512, 1024, 2048];\n\n  return (\n    <Navbar>\n      <NavbarGroup>\n        <NavbarHeading>\n          <h3>screencatcher</h3>\n        </NavbarHeading>\n        <Button disabled={recording} onClick={startCapture} icon=\"record\">\n          Record\n        </Button>\n        <Button disabled={!recording} onClick={stopCapture} icon=\"stop\">\n          Stop\n        </Button>\n      </NavbarGroup>\n\n      <NavbarGroup align={Alignment.RIGHT}>\n        <Button icon=\"zoom-to-fit\" onClick={() => setCropping(true)}>\n          Crop (PNG Only)\n        </Button>\n        <NavbarDivider />\n        <Popover\n          minimal\n          content={\n            <Menu>\n              <MenuItem\n                text=\"Export to PNG\"\n                disabled={converting}\n                onClick={onExportPng}\n              />\n              <MenuItem\n                text=\"Export to GIF\"\n                disabled={converting}\n                onClick={onExportGif}\n              />\n              <MenuDivider />\n\n              <MenuItem text=\"Image Width\">\n                {imageWidths.map((width: number) => (\n                  <MenuItem\n                    text={`${width}`}\n                    icon={gifWidth === width ? \"tick\" : null}\n                    onClick={() => setGifWidth(width)}\n                  />\n                ))}\n              </MenuItem>\n            </Menu>\n          }\n        >\n          <Button icon=\"export\" text=\"Export...\" />\n        </Popover>\n        {(png || gif) && (\n          <Popover\n            minimal\n            content={\n              <Menu>\n                <MenuItem\n                  text=\"Download PNG\"\n                  download=\"screencatcher.png\"\n                  href={`data:image/png;base64,${base64}`}\n                  target=\"_blank\"\n                  icon=\"download\"\n                  disabled={!png}\n                />\n                <MenuItem\n                  text=\"Download GIF\"\n                  download=\"screencatcher.gif\"\n                  href={gif}\n                  target=\"_blank\"\n                  icon=\"download\"\n                  disabled={!gif}\n                />\n              </Menu>\n            }\n          >\n            <Button icon=\"download\" text=\"Download...\" />\n          </Popover>\n        )}\n        {converting && (\n          <>\n            <NavbarDivider />\n            <div style={{ width: \"10rem\" }}>\n              <ProgressBar value={progress} />\n            </div>\n          </>\n        )}\n        <NavbarDivider />\n        Duration: {numeral(durationSecs > 0 ? durationSecs : 0).format(\"0.0\")}s\n      </NavbarGroup>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"@blueprintjs/core\";\nimport reactable from \"reactablejs\";\nimport interact from \"interactjs\";\n\nconst Demo = (props: any) => (\n  <div\n    ref={props.getRef}\n    style={{\n      position: \"absolute\",\n      left: props.x,\n      top: props.y,\n      width: props.width,\n      height: props.height,\n      touchAction: \"none\",\n      borderWidth: 5,\n      borderColor: \"red\",\n      borderStyle: \"solid\",\n      pointerEvents: \"all\",\n    }}\n  >\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      {props.x},{props.y},{props.width},{props.height}{\" \"}\n      <Button\n        onClick={() =>\n          props.onCrop([props.x, props.y, props.width, props.height])\n        }\n      >\n        Crop\n      </Button>\n      <Button onClick={() => props.onCropCancel()}>Cancel</Button>\n    </div>\n  </div>\n);\nconst Reactable = reactable(Demo);\n\nexport const Cropper = ({\n  onCrop,\n  onCancel,\n}: {\n  onCrop: any;\n  onCancel: any;\n}) => {\n  const [coordinate, setCoordinate] = React.useState({\n    x: 0,\n    y: 0,\n    width: 300,\n    height: 200,\n  });\n  return (\n    <Reactable\n      onCrop={onCrop}\n      onCropCancel={onCancel}\n      resizable={{\n        edges: { left: true, right: true, bottom: true, top: true },\n        modifiers: [\n          interact.modifiers.restrictRect({\n            restriction: \"parent\",\n          }),\n        ],\n      }}\n      draggable={{\n        modifiers: [\n          interact.modifiers.restrictRect({\n            restriction: \"parent\",\n          }),\n        ],\n      }}\n      onDragMove={(event: any) =>\n        setCoordinate((prev: any) => ({\n          x: prev.x + event.dx,\n          y: prev.y + event.dy,\n          width: prev.width,\n          height: prev.height,\n        }))\n      }\n      onResizeMove={(e: any) => {\n        const { width, height } = e.rect;\n        const { left, top } = e.deltaRect;\n        setCoordinate((prev) => {\n          return {\n            x: prev.x + left,\n            y: prev.y + top,\n            width,\n            height,\n          };\n        });\n      }}\n      {...coordinate}\n    />\n  );\n};\n","import React from \"react\";\n\nexport const Video = ({ chunksUrl }: { chunksUrl: any }) => {\n  return (\n    <video\n      autoPlay\n      controls\n      style={{\n        maxHeight: \"100%\",\n        height: \"100%\",\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n      src={chunksUrl ? chunksUrl : undefined}\n    />\n  );\n};","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { Button, NonIdealState } from \"@blueprintjs/core\";\nimport { exportPng } from \"./export/exportPng\";\nimport { exportGif } from \"./export/exportGif\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport { useContainerDimensions } from \"./utils/useContainerDimensions\";\nimport { Cropper } from \"./components/Cropper\";\nimport { Video } from \"./components/Video\";\n\nasync function captureDisplay(displayMediaOptions: any) {\n  let captureStream = null;\n\n  try {\n    captureStream = await (navigator.mediaDevices as any).getDisplayMedia(\n      displayMediaOptions\n    );\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n  return captureStream;\n}\n\nconst displayMediaOptions = {\n  video: {\n    cursor: \"always\",\n  },\n  audio: false,\n};\n\nconst App = () => {\n  const [mediaRecorder, setMediaRecorder] = useState<any>(null);\n  const [chunks, setChunks] = useState<any[]>([]);\n  const [chunksUrl, setChunksUrl] = useState<string>(\"\");\n  const [recording, setRecording] = useState<boolean>(false);\n  const [converting, setConverting] = useState<boolean>(false);\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [stopTime, setStopTime] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [gifWidth, setGifWidth] = useState<number>(1024);\n  const [screenWidth, setScreenWidth] = useState<number | null>(null);\n  const [screenHeight, setScreenHeight] = useState<number | null>(null);\n  const [gif, setGif] = useState<any>(null);\n  const [progress, setProgress] = useState(0);\n  const [png, setPng] = useState<any>(null);\n  const [cropping, setCropping] = useState(false);\n  const [cropDimensions, setCropDimensions] = useState<null | number[]>();\n\n  const startCapture = async () => {\n    const captureStream = await captureDisplay(displayMediaOptions);\n    const _mediaRecorder = new MediaRecorder(captureStream);\n    setRecording(true);\n\n    _mediaRecorder.ondataavailable = (e: any) =>\n      setChunks((existing) => {\n        existing.push(e.data);\n        return existing;\n      });\n\n    _mediaRecorder.onstop = () => {\n      setRecording(false);\n      setChunksUrl(URL.createObjectURL(chunks[0]));\n      setScreenWidth(captureStream.getVideoTracks()[0].getSettings().width);\n      setScreenHeight(captureStream.getVideoTracks()[0].getSettings().height);\n    };\n\n    _mediaRecorder.start();\n    setStartTime(Date.now());\n    setMediaRecorder(_mediaRecorder);\n  };\n\n  const stopCapture = async () => {\n    mediaRecorder.stop();\n    setStopTime(Date.now());\n  };\n\n  const videoRef = useRef();\n  const { width, height } = useContainerDimensions(videoRef);\n\n  const browserAspectRatio = width / height;\n  const videoAspectRatio = screenWidth! / screenHeight!;\n\n  let videoLeft = 0,\n    videoTop = 0,\n    videoWidth = width,\n    videoHeight = height;\n\n  if (videoAspectRatio > browserAspectRatio) {\n    const scale = width / screenWidth!;\n    const scaledHeight = scale * screenHeight!;\n\n    videoTop = 0.5 * (height - scaledHeight);\n    videoHeight = scaledHeight;\n  } else if (browserAspectRatio > videoAspectRatio) {\n    const scale = height / screenHeight!;\n    const scaledWidth = scale * screenWidth!;\n\n    videoLeft = 0.5 * (width - scaledWidth);\n    videoWidth = scaledWidth;\n  }\n\n  console.log(videoLeft, videoTop, videoWidth, videoHeight);\n\n  const onExportPng = () => {\n    const vid = document.createElement(\"video\");\n    vid.src = chunksUrl;\n    vid.width = screenWidth!;\n    vid.height = screenHeight!;\n    setConverting(true);\n\n    const scaleFactorX = (1.0 * screenWidth!) / width;\n    const scaleFactorY = (1.0 * screenHeight!) / height;\n\n    exportPng(\n      vid,\n      cropDimensions ? Math.round(cropDimensions[0] * scaleFactorX) : 0,\n      cropDimensions ? Math.round(cropDimensions[1] * scaleFactorY) : 0,\n      cropDimensions\n        ? Math.round(cropDimensions[2] * scaleFactorX)\n        : screenWidth!,\n      cropDimensions\n        ? Math.round(cropDimensions[3] * scaleFactorY)\n        : screenHeight!,\n      cropDimensions ? Math.round(cropDimensions[2] * scaleFactorX) : gifWidth,\n      cropDimensions\n        ? Math.round(cropDimensions[3] * scaleFactorY)\n        : (screenHeight! * gifWidth) / screenWidth!,\n      (png: any) => {\n        setConverting(false);\n        setPng(png);\n      }\n    );\n  };\n\n  const onCrop = (dimensions: number[]) => {\n    setCropDimensions(dimensions);\n    setCropping(false);\n  };\n\n  const onCropCancel = () => {\n    setCropping(false);\n  };\n\n  useEffect(() => {\n    setTimeout(() => setCurrentTime(Date.now()), 1000);\n  }, [currentTime]);\n\n  const durationSecs =\n    ((stopTime ? stopTime : currentTime) -\n      (startTime ? startTime : currentTime)) /\n    1000.0;\n\n  const onExportGif = () => {\n    setConverting(true);\n    exportGif(\n      chunks,\n      startTime!,\n      stopTime!,\n      screenWidth!,\n      screenHeight!,\n      (img: any) => {\n        setGif(img);\n        setConverting(false);\n      },\n      setProgress,\n      gifWidth\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"bp3-dark\">\n        <Toolbar\n          converting={converting}\n          durationSecs={durationSecs}\n          gif={gif}\n          gifWidth={gifWidth}\n          onExportGif={onExportGif}\n          onExportPng={onExportPng}\n          png={png}\n          progress={progress}\n          recording={recording}\n          setCropping={setCropping}\n          setGifWidth={setGifWidth}\n          startCapture={startCapture}\n          stopCapture={stopCapture}\n        />\n        <div\n          style={{\n            height: \"calc(100vh - 50px)\",\n            maxHeight: \"calc(100vh - 50px)\",\n            width: \"100vw\",\n            maxWidth: \"100vw\",\n            padding: \"1rem\",\n            backgroundColor: \"#293742\",\n          }}\n        >\n          <div\n            style={{\n              width: \"100%\",\n              maxWidth: \"100%\",\n              height: \"100%\",\n              maxHeight: \"100%\",\n              position: \"relative\",\n            }}\n            ref={videoRef as any}\n          >\n            <div\n              style={{\n                position: \"absolute\",\n                left: videoLeft,\n                top: videoTop,\n                width: videoWidth,\n                height: videoHeight,\n                pointerEvents: \"none\",\n              }}\n            >\n              {cropping && <Cropper onCrop={onCrop} onCancel={onCropCancel} />}\n            </div>\n            {chunksUrl ? (\n              <Video chunksUrl={chunksUrl} />\n            ) : (\n              <NonIdealState\n                title=\"Nothing on tape yet\"\n                description=\"Record something\"\n                icon=\"warning-sign\"\n                action={\n                  !recording ? (\n                    <Button\n                      disabled={recording}\n                      onClick={startCapture}\n                      icon=\"record\"\n                    >\n                      Record\n                    </Button>\n                  ) : undefined\n                }\n              ></NonIdealState>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useContainerDimensions = (myRef: any) => {\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight,\n  });\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef]);\n\n  return dimensions;\n};\n","import gifshot from \"gifshot\";\n\nexport const exportGif = (\n  chunks: any[],\n  startTime: number,\n  stopTime: number,\n  screenWidth: number,\n  screenHeight: number,\n  onImageComplete: any,\n  onImageProgress: any,\n  gifWidth: number\n) => {\n  const scaleFactor = gifWidth / screenWidth;\n  const gifHeight = scaleFactor * screenHeight;\n  const durationMillis = 1.0 * (stopTime - startTime);\n  const framesPerSecond = 5;\n  const frameDuration = 10.0 / framesPerSecond;\n  const numFrames = Math.trunc((framesPerSecond * durationMillis) / 1000.0);\n  const interval = 1.0 / framesPerSecond;\n\n  onImageProgress(0);\n  gifshot.createGIF(\n    {\n      video: chunks,\n      gifWidth,\n      gifHeight,\n      numFrames,\n      interval,\n      frameDuration,\n      progressCallback: onImageProgress,\n    },\n    function (obj: any) {\n      if (!obj.error) {\n        var image = obj.image;\n        onImageComplete(image);\n      }\n    }\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}