{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["captureDisplay","displayMediaOptions","a","captureStream","navigator","mediaDevices","getDisplayMedia","console","error","video","cursor","audio","GifRenderer","chunks","startTime","stopTime","screenWidth","screenHeight","onImageComplete","onImageProgress","gifHeight","durationMillis","numFrames","Math","trunc","useEffect","log","gifshot","createGIF","gifWidth","interval","frameDuration","progressCallback","obj","image","Video","chunksUrl","autoPlay","controls","style","maxHeight","height","maxWidth","width","src","undefined","App","useState","mediaRecorder","setMediaRecorder","setChunks","setChunksUrl","recording","setRecording","converting","setConverting","setStartTime","setStopTime","Date","now","currentTime","setCurrentTime","setScreenWidth","setScreenHeight","img","setImg","progress","setProgress","startCapture","_mediaRecorder","MediaRecorder","ondataavailable","e","existing","push","data","onstop","URL","createObjectURL","getVideoTracks","getSettings","start","stopCapture","stop","setTimeout","durationSecs","className","disabled","onClick","icon","align","Alignment","RIGHT","value","length","download","href","target","loading","numeral","format","backgroundColor","title","description","action","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.caac0003.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport gifshot from \"gifshot\";\nimport {\n  Button,\n  ProgressBar,\n  Navbar,\n  NavbarGroup,\n  NavbarHeading,\n  Alignment,\n  NavbarDivider,\n  AnchorButton,\n  NonIdealState,\n} from \"@blueprintjs/core\";\nimport numeral from \"numeral\";\n\nasync function captureDisplay(displayMediaOptions: any) {\n  let captureStream = null;\n\n  try {\n    captureStream = await (navigator.mediaDevices as any).getDisplayMedia(\n      displayMediaOptions\n    );\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n  return captureStream;\n}\n\ndeclare var MediaRecorder: any;\ndeclare var ClipboardItem: any;\n\nconst displayMediaOptions = {\n  video: {\n    cursor: \"always\",\n  },\n  audio: false,\n};\n\nconst GifRenderer = ({\n  chunks,\n  startTime,\n  stopTime,\n  screenWidth,\n  screenHeight,\n  onImageComplete,\n  onImageProgress,\n}: {\n  chunks: any[];\n  startTime: number;\n  stopTime: number;\n  screenWidth: number;\n  screenHeight: number;\n  onImageComplete: any;\n  onImageProgress: any;\n}) => {\n  const gifWidth = 1024;\n  const scaleFactor = gifWidth / screenWidth;\n  const gifHeight = scaleFactor * screenHeight;\n  const durationMillis = 1.0 * (stopTime - startTime);\n  const framesPerSecond = 5;\n  const frameDuration = 10.0 / framesPerSecond;\n  const numFrames = Math.trunc((framesPerSecond * durationMillis) / 1000.0);\n  const interval = 1.0 / framesPerSecond;\n\n  useEffect(() => {\n    console.log(\"Rendering\");\n    onImageProgress(0);\n    gifshot.createGIF(\n      {\n        video: chunks,\n        gifWidth,\n        gifHeight,\n        numFrames,\n        interval,\n        frameDuration,\n        progressCallback: onImageProgress,\n      },\n      function (obj: any) {\n        if (!obj.error) {\n          var image = obj.image;\n          onImageComplete(image);\n        }\n      }\n    );\n  }, [chunks]);\n\n  return <></>;\n};\n\nconst Video = ({ chunksUrl }: { chunksUrl: any }) => {\n  return (\n    <video\n      autoPlay\n      controls\n      style={{\n        maxHeight: \"100%\",\n        height: \"100%\",\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n      src={chunksUrl ? chunksUrl : undefined}\n    />\n  );\n};\n\nconst App = () => {\n  const [mediaRecorder, setMediaRecorder] = useState<any>(null);\n  const [chunks, setChunks] = useState<any[]>([]);\n  const [chunksUrl, setChunksUrl] = useState<string>(\"\");\n  const [recording, setRecording] = useState<boolean>(false);\n  const [converting, setConverting] = useState<boolean>(false);\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [stopTime, setStopTime] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [screenWidth, setScreenWidth] = useState<number | null>(null);\n  const [screenHeight, setScreenHeight] = useState<number | null>(null);\n  const [img, setImg] = useState<any>(null);\n  const [progress, setProgress] = useState(0);\n\n  const startCapture = async () => {\n    const captureStream = await captureDisplay(displayMediaOptions);\n    const _mediaRecorder = new MediaRecorder(captureStream);\n    setRecording(true);\n\n    _mediaRecorder.ondataavailable = (e: any) =>\n      setChunks((existing) => {\n        existing.push(e.data);\n        return existing;\n      });\n\n    _mediaRecorder.onstop = (e: any) => {\n      setRecording(false);\n      setConverting(true);\n      setChunksUrl(URL.createObjectURL(chunks[0]));\n      setScreenWidth(captureStream.getVideoTracks()[0].getSettings().width);\n      setScreenHeight(captureStream.getVideoTracks()[0].getSettings().height);\n    };\n\n    _mediaRecorder.start();\n    setStartTime(Date.now());\n    setMediaRecorder(_mediaRecorder);\n  };\n\n  const stopCapture = async () => {\n    mediaRecorder.stop();\n    setStopTime(Date.now());\n  };\n\n  useEffect(() => {\n    setTimeout(() => setCurrentTime(Date.now()), 1000);\n  }, [currentTime]);\n\n  const durationSecs =\n    ((stopTime ? stopTime : currentTime) -\n      (startTime ? startTime : currentTime)) /\n    1000.0;\n\n  return (\n    <div className=\"App\">\n      <main className=\"bp3-dark\">\n        <Navbar>\n          <NavbarGroup>\n            <NavbarHeading>\n              <h3>screen2gif</h3>\n            </NavbarHeading>\n            <Button disabled={recording} onClick={startCapture} icon=\"record\">\n              Record\n            </Button>\n            <Button disabled={!recording} onClick={stopCapture} icon=\"stop\">\n              Stop\n            </Button>\n          </NavbarGroup>\n\n          <NavbarGroup align={Alignment.RIGHT}>\n            {converting && (\n              <div style={{ width: \"10rem\" }}>\n                Converting to GIF <ProgressBar value={progress} />\n              </div>\n            )}\n            {img && (\n              <>\n                {img && img.length <= 1e6 && <img src={img} width={64} />}\n                <AnchorButton\n                  download=\"screen2gif.gif\"\n                  href={img}\n                  target=\"_blank\"\n                  icon=\"download\"\n                  loading={converting}\n                  disabled={!img}\n                >\n                  Download GIF\n                </AnchorButton>\n              </>\n            )}\n            <NavbarDivider />\n            Duration:{\" \"}\n            {numeral(durationSecs > 0 ? durationSecs : 0).format(\"0.0\")}s\n          </NavbarGroup>\n        </Navbar>\n\n        <div\n          style={{\n            height: \"calc(100vh - 75px)\",\n            width: \"100vw\",\n            backgroundColor: \"#293742\",\n          }}\n        >\n          {chunksUrl ? (\n            <Video chunksUrl={chunksUrl} />\n          ) : (\n            <NonIdealState\n              title=\"Nothing on tape yet\"\n              description=\"Record something\"\n              icon=\"warning-sign\"\n              action={\n                !recording ? (\n                  <Button\n                    disabled={recording}\n                    onClick={startCapture}\n                    icon=\"record\"\n                  >\n                    Record\n                  </Button>\n                ) : undefined\n              }\n            ></NonIdealState>\n          )}\n        </div>\n\n        {startTime && stopTime && screenWidth && screenHeight && (\n          <GifRenderer\n            chunks={chunks}\n            startTime={startTime}\n            stopTime={stopTime}\n            screenWidth={screenWidth!}\n            screenHeight={screenHeight!}\n            onImageComplete={(img: any) => {\n              setImg(img);\n              setConverting(false);\n            }}\n            onImageProgress={setProgress}\n          />\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}